[0m[1mmodule.logs_bucket.data.aws_canonical_user_id.current: Reading...[0m[0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.lambda_scripts_bucket.data.aws_canonical_user_id.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=683603511960][0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.service_policy[0]: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.kms_key_policy: Reading...[0m[0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.service_policy[0]: Read complete after 0s [id=354740342][0m
[0m[1mdata.aws_iam_policy_document.kms_key_policy: Read complete after 0s [id=244799148][0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_caller_identity.current: Read complete after 0s [id=683603511960][0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.self_admin[0]: Reading...[0m[0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.restrictive_policy[0]: Reading...[0m[0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.self_admin[0]: Read complete after 0s [id=3091405280][0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.restrictive_policy[0]: Read complete after 0s [id=1108681181][0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.merged_policy[0]: Reading...[0m[0m
[0m[1mmodule.kms_key.module.key_policy[0].data.aws_iam_policy_document.merged_policy[0]: Read complete after 0s [id=1970210760][0m
[0m[1mmodule.logs_bucket.data.aws_canonical_user_id.current: Read complete after 0s [id=5edaa2b42d18005e776bd85ddb8b20547a28ba9368638e8f3eb661aede797d7f][0m
[0m[1mmodule.lambda_scripts_bucket.data.aws_canonical_user_id.current: Read complete after 1s [id=5edaa2b42d18005e776bd85ddb8b20547a28ba9368638e8f3eb661aede797d7f][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_iam_policy_document.log_bucket_policy_document[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "log_bucket_policy_document" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "EnforceSSL"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllwOnlyThisArns"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                  [32m+[0m[0m "arn:aws:iam::683603511960:root",
                  [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                  [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                ]
              [32m+[0m[0m variable = "aws:PrincipalArn"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::683603511960:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # data.aws_iam_policy_document.my_lambda_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "my_lambda_policy" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:Delete*",
              [32m+[0m[0m "s3:Describe*",
              [32m+[0m[0m "s3:Get*",
              [32m+[0m[0m "s3:List*",
              [32m+[0m[0m "s3:Put*",
              [32m+[0m[0m "s3:RestoreObject",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowReadWriteS3"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey",
              [32m+[0m[0m "kms:ListKeys",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowDecryptEncrypt"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "cloudwatch:PutMetricAlarm",
              [32m+[0m[0m "cloudwatch:PutMetricData",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowPutCustomMetrics"
        }
    }

[1m  # aws_kms_grant.my_lambda_grant_kms_key[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_grant" "my_lambda_grant_kms_key" {
      [32m+[0m[0m grant_id          = (known after apply)
      [32m+[0m[0m grant_token       = (sensitive value)
      [32m+[0m[0m grantee_principal = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m key_id            = (known after apply)
      [32m+[0m[0m name              = "esn-dev-grant"
      [32m+[0m[0m operations        = [
          [32m+[0m[0m "Decrypt",
          [32m+[0m[0m "DescribeKey",
          [32m+[0m[0m "Encrypt",
          [32m+[0m[0m "GenerateDataKey",
        ]
      [32m+[0m[0m retire_on_delete  = false
    }

[1m  # aws_lambda_permission.allow_alb[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_alb" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "esn-dev-my_lambda-lambda"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "elasticloadbalancing.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromALB"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_lb_target_group_attachment.lambda_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group_attachment" "lambda_attachment" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m target_group_arn = (known after apply)
      [32m+[0m[0m target_id        = (known after apply)
    }

[1m  # aws_security_group.web_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "web_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow HTTP inbound traffic"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow all outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "HTTP from anywhere"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "ec2-web-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "ec2-web-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"   = "dev"
          [32m+[0m[0m "GitRepository" = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Name"          = "ec2-web-sg"
          [32m+[0m[0m "ProjectID"     = "esn"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0e8471e886fad17c5"
    }

[1m  # module.alb_lambda.aws_lb.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "this" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enable_zonal_shift                                           = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "esn-dev-lambda-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = [
          [32m+[0m[0m "subnet-032f05d2bf79cae47",
          [32m+[0m[0m "subnet-04580d1a8986b23d4",
        ]
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-alb"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-alb"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.alb_lambda.aws_lb_listener.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "this" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 80
      [32m+[0m[0m protocol                                                              = "HTTP"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = (known after apply)
      [32m+[0m[0m tags                                                                  = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-alb"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m tags_all                                                              = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-alb"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.alb_lambda.aws_lb_target_group.lambda[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "lambda" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "esn-dev-lambda-tg-0"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-tg"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-tg"
          [32m+[0m[0m "Owner"              = "douggui.med.amine@gmail.com"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
        }
      [32m+[0m[0m target_type                        = "lambda"

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }
    }

[1m  # module.lambda_scripts_bucket.data.aws_iam_policy_document.combined[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "combined" {
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m json                    = (known after apply)
      [32m+[0m[0m minified_json           = (known after apply)
      [32m+[0m[0m source_policy_documents = (known after apply)
    }

[1m  # module.lambda_scripts_bucket.data.aws_iam_policy_document.enforce_ssl[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "enforce_ssl" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "EnforceSSL"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.lambda_scripts_bucket.aws_kms_alias.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/esn-dev-lambda-script-bucket-kms-key"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.lambda_scripts_bucket.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 10
      [32m+[0m[0m description                        = "This key is used to encrypt bucket objects"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-script-bucket-kms-key"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-script-bucket-kms-key"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "this" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "esn-dev-lambda-script-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = false
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-script-bucket"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-lambda-script-bucket"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_logging.bucket_logging[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_logging" "bucket_logging" {
      [32m+[0m[0m bucket        = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m target_bucket = "esn-dev-log-bucket"
      [32m+[0m[0m target_prefix = "log/"
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_ownership_controls.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "this" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerEnforced"
        }
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "this" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_public_access_block.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "this" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_server_side_encryption_configuration.encryption_configuration[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "encryption_configuration" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = false

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.lambda_scripts_bucket.aws_s3_bucket_versioning.bucket_version[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "bucket_version" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.logs_bucket.data.aws_iam_policy_document.combined[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "combined" {
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m json                    = (known after apply)
      [32m+[0m[0m minified_json           = (known after apply)
      [32m+[0m[0m source_policy_documents = (known after apply)
    }

[1m  # module.logs_bucket.aws_s3_bucket.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "this" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "esn-dev-log-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = false
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-log-bucket"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-log-bucket"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.logs_bucket.aws_s3_bucket_ownership_controls.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "this" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "ObjectWriter"
        }
    }

[1m  # module.logs_bucket.aws_s3_bucket_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "this" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.logs_bucket.aws_s3_bucket_public_access_block.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "this" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.logs_bucket.aws_s3_bucket_server_side_encryption_configuration.encryption_configuration[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "encryption_configuration" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm = "AES256"
            }
        }
    }

[1m  # module.my_lambda.data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.my_lambda.data.aws_iam_policy_document.ec2policies[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "ec2policies" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateTags",
              [32m+[0m[0m "ec2:DeleteTags",
              [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateNetworkInterface",
              [32m+[0m[0m "ec2:DeleteNetworkInterface",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.my_lambda.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRole",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "lambda.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # module.my_lambda.data.aws_iam_policy_document.this_logs[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this_logs" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "logs:CreateLogGroup",
              [32m+[0m[0m "logs:CreateLogStream",
              [32m+[0m[0m "logs:DescribeLogStreams",
              [32m+[0m[0m "logs:PutLogEvents",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "allowLoggingToCloudWatch"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey",
              [32m+[0m[0m "kms:ListKeys",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.my_lambda.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/esn-dev-my_lambda-lambda"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
    }

[1m  # module.my_lambda.aws_iam_policy.this_additional[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "this_additional" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "esn-dev-my_lambda-lambda-add"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment"   = "dev"
          [32m+[0m[0m "GitRepository" = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "ProjectID"     = "esn"
        }
    }

[1m  # module.my_lambda.aws_iam_policy.this_logs[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "this_logs" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "esn-dev-my_lambda-lambda-base"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment"   = "dev"
          [32m+[0m[0m "GitRepository" = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "ProjectID"     = "esn"
        }
    }

[1m  # module.my_lambda.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "esn-dev-my_lambda-lambda-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda-role"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda-role"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "Not Set"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.my_lambda.aws_iam_role_policy.lambda_inline_policy[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_inline_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "esn-dev-my_lambda-lambda-inline"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = "esn-dev-my_lambda-lambda-role"
    }

[1m  # module.my_lambda.aws_iam_role_policy_attachment.this_additional[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this_additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "esn-dev-my_lambda-lambda-role"
    }

[1m  # module.my_lambda.aws_iam_role_policy_attachment.this_logs[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this_logs" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "esn-dev-my_lambda-lambda-role"
    }

[1m  # module.my_lambda.aws_lambda_function.lambda[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "lambda" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m function_name                  = "esn-dev-my_lambda-lambda"
      [32m+[0m[0m handler                        = "main.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m kms_key_arn                    = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 512
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = true
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.11"
      [32m+[0m[0m s3_bucket                      = "esn-dev-lambda-script-bucket"
      [32m+[0m[0m s3_key                         = "artifact/esn-dev-my_lambda-lambda/main-0579b0586bc74ca6f79384bdb3ce0598.zip"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not Set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-my_lambda-lambda"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not Set"
        }
      [32m+[0m[0m timeout                        = 900
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "REGION" = "eu-central-1"
              [32m+[0m[0m "stage"  = "dev"
            }
        }

      [32m+[0m[0m tracing_config {
          [32m+[0m[0m mode = "PassThrough"
        }
    }

[1m  # module.my_lambda.aws_s3_object.lambda_artifact_object[0][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "lambda_artifact_object" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = "esn-dev-lambda-script-bucket"
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "artifact/esn-dev-my_lambda-lambda/main-0579b0586bc74ca6f79384bdb3ce0598.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "/home/mdogui/projects/quality-group-case/lambdas/my_lambda/src/../main-0579b0586bc74ca6f79384bdb3ce0598.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"   = "dev"
          [32m+[0m[0m "GitRepository" = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "ProjectID"     = "esn"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.my_lambda.null_resource.build_upload[0][0m will be created
[0m  [32m+[0m[0m resource "null_resource" "build_upload" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m triggers = {
          [32m+[0m[0m "bucket_name"        = "esn-dev-lambda-script-bucket"
          [32m+[0m[0m "external_trigger"   = ""
          [32m+[0m[0m "handler_script_md5" = "main-0579b0586bc74ca6f79384bdb3ce0598"
          [32m+[0m[0m "requirements_md5"   = "d41d8cd98f00b204e9800998ecf8427e"
          [32m+[0m[0m "s3_key"             = "artifact/esn-dev-my_lambda-lambda/main-0579b0586bc74ca6f79384bdb3ce0598.zip"
        }
    }

[1m  # module.kms_key.module.kms_key[0].aws_kms_alias.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/esn-dev-kms_key"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.kms_key.module.kms_key[0].aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 30
      [32m+[0m[0m description                        = "KMS Key esn case"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::683603511960:user/qg_case_user"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "SelfAdmin"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                              [32m+[0m[0m "arn:aws:iam::683603511960:root",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "AdditionalKeyAdministrators"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt*",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt*",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                              [32m+[0m[0m "arn:aws:iam::683603511960:root",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "EncryptDecryptAccess"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt*",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Decrypt*",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m ArnLike = {
                              [32m+[0m[0m "kms:EncryptionContext:aws:logs:arn" = "arn:aws:logs:eu-central-1:683603511960:*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "logs.eu-central-1.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "LogsService"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                              [32m+[0m[0m "arn:aws:iam::683603511960:root",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Enable IAM User Permissions"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:Update*",
                          [32m+[0m[0m "kms:ScheduleKeyDeletion",
                          [32m+[0m[0m "kms:Revoke*",
                          [32m+[0m[0m "kms:Put*",
                          [32m+[0m[0m "kms:List*",
                          [32m+[0m[0m "kms:Get*",
                          [32m+[0m[0m "kms:Enable*",
                          [32m+[0m[0m "kms:Disable*",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:DeleteImportedKeyMaterial",
                          [32m+[0m[0m "kms:Delete*",
                          [32m+[0m[0m "kms:Create*",
                          [32m+[0m[0m "kms:CancelKeyDeletion",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::683603511960:user/qg_case_user",
                              [32m+[0m[0m "arn:aws:iam::683603511960:root",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Allow administration of the key"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:DescribeKey",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "s3.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Allow AWS S3 to use the key"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-kms_key"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not set"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"        = "dev"
          [32m+[0m[0m "GitRepository"      = "https://github.com/Mohamed-Amine-Dogui/quality-group-case"
          [32m+[0m[0m "KST"                = "Not set"
          [32m+[0m[0m "Managed"            = "Terraform"
          [32m+[0m[0m "Name"               = "esn-dev-kms_key"
          [32m+[0m[0m "Project"            = "esn"
          [32m+[0m[0m "ProjectID"          = "esn"
          [32m+[0m[0m "Stage"              = "dev"
          [32m+[0m[0m "TerraformWorkspace" = "default"
          [32m+[0m[0m "WANumber"           = "Not set"
        }
    }

[1mPlan:[0m 33 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_lambda_function_arn  = (known after apply)
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mDeprecated attribute[0m
[33m│[0m [0m
[33m│[0m [0m[0m  on .terraform/modules/lambda_scripts_bucket/s3/s3-logging-encrypted/main.tf line 62, in resource "aws_s3_bucket" "this":
[33m│[0m [0m  62:       [4macl[0m[0m
[33m│[0m [0m
[33m│[0m [0mThe attribute "acl" is deprecated. Refer to the provider documentation for details.
[33m│[0m [0m
[33m│[0m [0m(and one more similar warning elsewhere)
[33m╵[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
